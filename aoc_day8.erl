-module(aoc_day8).
-export([solve_part1/0, replace_column/4]).
-import(lists, [map/2, seq/2, nth/2, sublist/2, nthtail/2]).

solve_part1() -> 
[
    empty_row(),
    empty_row(),
    empty_row(),
    empty_row(),
    empty_row(),
    empty_row()
].

rotate_row(0, Row) -> Row;
rotate_row(N, Row) -> rotate_row(N-1, [nth(length(Row), Row)] ++ sublist(Row, length(Row)-1)).

rotate_column(N, ColumnNo, Screen) -> replace_column(ColumnNo, rotate_row(N, column_as_row(ColumnNo, Screen)), Screen).

column_as_row(ColumnNo, Screen) -> 
    [nth(ColumnNo, nth(1, Screen)), 
    nth(ColumnNo, nth(2, Screen)), 
    nth(ColumnNo, nth(3, Screen)), 
    nth(ColumnNo, nth(4, Screen)), 
    nth(ColumnNo, nth(5, Screen)), 
    nth(ColumnNo, nth(6, Screen))].

replace_column(ColNo, Column, Screen) -> 

replace_column(_, _, [], _) -> [];
replace_column(ColNo, Column, [Row|RestOfScreen], RowNo) -> 
    [sublist(Row, ColNo-1) ++ [nth(RowNo, Column)] ++ nthtail(ColNo, Row) | replace_column(ColNo, Column, RestOfScreen, RowNo-1)].

empty_row() -> map(fun(_) -> 0 end, seq(0, 50)).

commands() -> [
{rect, 1, 1},
{row, 0, 20},
{rect, 1, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 3},
{rect, 2, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 3},
{rect, 2, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 4},
{rect, 2, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 3},
{rect, 2, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 5},
{rect, 1, 1},
{row, 0, 2},
{rect, 1, 1},
{row, 0, 6},
{rect, 5, 1},
{row, 0, 2},
{rect, 1, 3},
{row, 2, 8},
{row, 0, 8},
{column, 0, 1},
{rect, 7, 1},
{row, 2, 24},
{row, 0, 20},
{column, 5, 1},
{column, 4, 2},
{column, 2, 2},
{column, 0, 1},
{rect, 7, 1},
{column, 34, 2},
{column, 22, 1},
{column, 15, 1},
{row, 2, 18},
{row, 0, 12},
{column, 8, 2},
{column, 7, 1},
{column, 5, 2},
{column, 2, 1},
{column, 0, 1},
{rect, 9, 1},
{row, 3, 28},
{row, 1, 28},
{row, 0, 20},
{column, 18, 1},
{column, 15, 1},
{column, 14, 1},
{column, 13, 1},
{column, 12, 2},
{column, 10, 3},
{column, 8, 1},
{column, 7, 2},
{column, 6, 1},
{column, 5, 1},
{column, 3, 1},
{column, 2, 2},
{column, 0, 1},
{rect, 19, 1},
{column, 34, 2},
{column, 24, 1},
{column, 23, 1},
{column, 14, 1},
{column, 9, 2},
{column, 4, 2},
{row, 3, 5},
{row, 2, 3},
{row, 1, 7},
{row, 0, 5},
{column, 0, 2},
{rect, 3, 2},
{column, 16, 2},
{row, 3, 27},
{row, 2, 5},
{row, 0, 20},
{column, 8, 2},
{column, 7, 1},
{column, 5, 1},
{column, 3, 3},
{column, 2, 1},
{column, 1, 2},
{column, 0, 1},
{rect, 9, 1},
{row, 4, 42},
{row, 3, 40},
{row, 1, 30},
{row, 0, 40},
{column, 37, 2},
{column, 36, 3},
{column, 35, 1},
{column, 33, 1},
{column, 32, 1},
{column, 31, 3},
{column, 30, 1},
{column, 28, 1},
{column, 27, 1},
{column, 25, 1},
{column, 23, 3},
{column, 22, 1},
{column, 21, 1},
{column, 20, 1},
{column, 18, 1},
{column, 17, 1},
{column, 16, 3},
{column, 15, 1},
{column, 13, 1},
{column, 12, 1},
{column, 11, 2},
{column, 10, 1},
{column, 8, 1},
{column, 7, 2},
{column, 5, 1},
{column, 3, 3},
{column, 2, 1},
{column, 1, 1},
{column, 0, 1},
{rect, 39, 1},
{column, 44, 2},
{column, 42, 2},
{column, 35, 5},
{column, 34, 2},
{column, 32, 2},
{column, 29, 2},
{column, 25, 5},
{column, 24, 2},
{column, 19, 2},
{column, 15, 4},
{column, 14, 2},
{column, 12, 3},
{column, 9, 2},
{column, 5, 5},
{column, 4, 2},
{row, 5, 5},
{row, 4, 38},
{row, 3, 10},
{row, 2, 46},
{row, 1, 10},
{column, 48, 4},
{column, 47, 3},
{column, 46, 3},
{column, 45, 1},
{column, 43, 1},
{column, 37, 5},
{column, 36, 5},
{column, 35, 4},
{column, 33, 1},
{column, 32, 5},
{column, 31, 5},
{column, 28, 5},
{column, 27, 5},
{column, 26, 3},
{column, 25, 4},
{column, 23, 1},
{column, 17, 5},
{column, 16, 5},
{column, 13, 1},
{column, 12, 5},
{column, 11, 5},
{column, 3, 1},
{column, 0, 1}
].